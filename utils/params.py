"""
util module
"""
import random
from operator import add
import regex
import numpy as np
import urllib
import tensorflow as tf
from functools import reduce
from tensorflow.python.client import device_lib
import os
import multiprocessing as mp
import cv2
import wget
import pandas as pd
import matplotlib.pyplot as plt
label_font_size = 15

def get_available_gpus():
    local_device_protos = device_lib.list_local_devices()
    return [x.name for x in local_device_protos if x.device_type == 'GPU']

def get_config_from_modeldir(model_dir):
    '''
    this funtion will try to get config dict
    from given model directory.
    '''
    if not is_config_available(model_dir):
        return None

    model_dir = model_dir+'/' if model_dir[-1]!='/' else model_dir
    with open(model_dir+'config') as f:
        config_str = f.read()
    params = util.string_to_config(config_str)
    return params

def is_config_available(target_dir):
    """
    this function checks if there is a config file in
    the specified directory.
    """
    return os.path.exists(target_dir) and "config" in os.listdir(target_dir)

def config_validator(config_test, config_ground_truth):
    """
    this function checks if the given config is valid or not
    using config_ground_truth
    """
    return isinstance(config_test, dict) and (config_test.keys() == config_ground_truth.keys())

def config_to_string(config):
    """
    this function converts config to string
    so that it can be used as a directory name or file name
    """
    return regex.sub('[\'\{\}\s]','',str(config))

def string_to_config(string):
    """
    this function converts file_name which is
    generated by "config_to_file_name" func to
    back to config dictionary
    """
    keys = regex.findall(r'[a-zA-Z_]+(?=:)', string)
    keys_vals = list(map(lambda key: (key, regex.sub(r'^.*{}:(.+?)(,.*)?$'.format(key), r'\1', string)), keys))
    keys_vals = list(map(lambda key_val: (key_val[0], ast.literal_eval(key_val[1])), keys_vals))
    return dict(keys_vals)

def config_to_file_name(config):
    """
    this function converts config to string
    so that it can be used as a directory name or file name
    """
    return regex.sub('[\'\{\}\s]','',str(config))
